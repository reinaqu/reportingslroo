'''
Created on 10 jul. 2021

@author: reinaqu_2
'''
import pandas as pd
import dataframes
from dataclasses import dataclass
from typing import TypeVar,List,Dict, Set, Any
import DataExtraction as datext
import PublicationsQuality as pubq
import graphics_utils as gu
import logging
from lxml import includes


DashboardDataExtraction = TypeVar('DashboardDataExtraction')
K = TypeVar('K')
V = TypeVar('V')
E = TypeVar('E')
'''
Dependencies
https://fcache.readthedocs.io/en/stable/

'''

@dataclass( order=True)
class DashboardDataExtraction:
    '''

        This class represents a dashboard that holds all the operations that can be executed with data related to the extracted
        data of the publications and the publications quality (as publications quality depends on the extracted data).
        These operatations that are specific of a sytematic literature review because they depend on the
        specific domain of the review.

        The class has two attributes:
            1. data: stores the extracted data from the publicatons.
            2. pub_quality: stores the object that holds the information about publication quality.
    '''
    data: datext.DataExtraction
    pub_quality: pubq.PublicationsQuality
    
    @staticmethod   
    def of(data:datext.DataExtraction) -> DashboardDataExtraction:
        '''
        @param data the object that holds the extracted data of the publications.
        @return: A DashboardDataExtraction object with the publication extracted data initialized and with no information 
        about the publication quality. 
        '''
        logging.basicConfig(level=logging.INFO)
        return DashboardDataExtraction(data, None)
    
    @property  
    def get_data(self) -> datext.DataExtraction:
        '''
        @return: the object that holds the information about extracted data
        '''
        return self.data

    @property  
    def get_publications_quality(self) -> datext.DataExtraction:
        '''
        @return: the object that holds the information about publications quality
        '''
        return self.pub_quality

    def set_publications_quality(self, pub_quality: pubq.PublicationsQuality):
        '''
        @param pub_quality:  object that holds the information about publications quality
        It sets the publication quality.
        '''
        self.pub_quality = pub_quality
    
    def create_piechart_count_multivalued_column(self, column_name:str, translation:Dict[K,V]={}, exclude:List[E]=[])->None:    
        '''
        A multivalued column is a column whose value is scattered through various columns of the original dataset.  This 
        kind of column is usually obtained in the reports generated by the Start tool: {http://lapes.dc.ufscar.br/tools/start_tool}.
        One example of this kind of column is the following one. 
        
        Process lifecycle phase : undetermined | Process lifecycle phase : process identification |  Process lifecycle phase : process analysis  |  Process lifecycle phase : process monitoring]
        ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                N                              |   N                                              |   N                                          |  Y 
                N                              |   N                                              |   Y                                          |  N 
                Y                              |   N                                              |   N                                          |  N
                N                              |   Y                                              |   Y                                          |  N
 
        This multivalued column that is stored with Y/N values can be summarized as followed:
        Process lifecycle phase
        -----------------------
        process monitoring
        process analysis
        undetermined
        process identification, process analysis

        @param column_name: Name of the multivalued column whose values are going to be synthesized in the piechart.
        @param translation: Dictionary that specify the translation of the values that holds the column to be represented. The translation
        implies that the value of the column is replaced by its translated value in the pie chart. One example of this parameter is
        <code>
            dict_plc_translation={'process monitoring':'monitoring',\
                        'process identification': 'identification',\
                        'process analysis' : 'analysis'
                        }
        </code>
        Note that this translation is useful when the values of the column are too long to be represented in a chart. The translation
        let us replace the original value of the column (for example, process analysis in the previous dict_plc_translation dictionary) for a shorter one (analysis).
        If translation holds an empty dictionary, the values of the column remain unchanged.
        @param exclude: List of values of the column that are going to be excluded from the pie chart. For example, if we
        do not want to represent in the pie chart the undetermined value, we should invoke the function as follows:
        <code>
        create_piechart_count_multivalued_column("Process lifecycle phase", dict_plc_translation, ["undetermined"])
        </code> 
        The default value for this parameter is an empty list, which means that all de values of the column are represented 
        in the pie chart.
        '''
        count_serie = self.data.count_multivalued_column(column_name)  
        count_serie =  dataframes.exclude_index_values_from_series(count_serie, exclude)
        if len(translation) > 0:
            count_serie = dataframes.translate_index_dataframe (count_serie,translation)
            
        gu.create_piechart(count_serie, 'number of studies', y_axis_label=False, font_size=16, label_distance=1.1, pct_distance=0.8)
    
    def create_bar_count_multivalued_column(self, column_name:str, rotation:int=90, translation:Dict[K,V]={}, exclude:List[K]=[])->None:    
        '''
        It creates a bar chart with the values of the column in the x-axis and the frequency of the values in the y-axis.
        A multivalued column is a column whose value is scattered through various columns of the original dataset.  This 
        kind of column is usually obtained in the reports generated by the Start tool: {http://lapes.dc.ufscar.br/tools/start_tool}.
        One example of this kind of column is the following one. 
        
        Process lifecycle phase : undetermined | Process lifecycle phase : process identification |  Process lifecycle phase : process analysis  |  Process lifecycle phase : process monitoring]
        ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                N                              |   N                                              |   N                                          |  Y 
                N                              |   N                                              |   Y                                          |  N 
                Y                              |   N                                              |   N                                          |  N
                N                              |   Y                                              |   Y                                          |  N
 
        This multivalued column that is stored with Y/N values can be summarized as followed:
        Process lifecycle phase
        -----------------------
        process monitoring
        process analysis
        undetermined
        process identification, process analysis

        @param column_name: Name of the multivalued column whose values are going to be synthesized in the bar chart.
        @param rotation: It represents the rotation of the labels in the X-axis. The default value is 90 (labels are written vertically)
        @param translation: Dictionary that specify the translation of the values that holds the column to be represented. The translation
        implies that the value of the column is replaced by its translated value in the bar chart. One example of this parameter is
        <code>
            dict_plc_translation={'process monitoring':'monitoring',\
                        'process identification': 'identification',\
                        'process analysis' : 'analysis'
                        }
        </code>
        Note that this translation is useful when the values of the column are too long to be represented in a chart. The translation
        let us replace the original value of the column (for example, process analysis in the previous dict_plc_translation dictionary) for a 
        shorter one (analysis).
        If translation holds an empty dictionary, the values of the column remain unchanged.
        @param exclude: List of values of the column that are going to be excluded from the pie chart. For example, if we
        do not want to represent in the bar chart the undetermined value, we should invoke the function as follows:
        <code>
        create_piechart_count_multivalued_column("Process lifecycle phase", dict_plc_translation, ["undetermined"])
        </code> 
        The default value for this parameter is an empty list, which means that all de values of the column are represented 
        in the bar chart.
        '''

        count_serie = self.data.count_multivalued_column(column_name)
        count_serie =  dataframes.exclude_index_values_from_series(count_serie, exclude)
            
        if len(translation) > 0:
            count_serie = dataframes.translate_index_dataframe (count_serie,translation)
        gu.create_bar(count_serie,x_labels_rotation=rotation)
  
    def create_bar_count_faceted_multivalued_column_filtered(self, facet1_name:str, facet2_name:str, include:Set[str], \
                                                             rotation:int=90, translation:Dict[K,V]={}, exclude:List[K]=[])->None:
        '''
        A multivalued column is a column whose value is scattered through various columns of the original dataset.  This 
        kind of column is usually obtained in the reports generated by the Start tool: {http://lapes.dc.ufscar.br/tools/start_tool}.
        One example of this kind of column is the following one. 
        
        Process lifecycle phase : undetermined | Process lifecycle phase : process identification |  Process lifecycle phase : process analysis  |  Process lifecycle phase : process monitoring]
        ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                N                              |   N                                              |   N                                          |  Y 
                N                              |   N                                              |   Y                                          |  N 
                Y                              |   N                                              |   N                                          |  N
                N                              |   Y                                              |   Y                                          |  N
 
        This multivalued column that is stored with Y/N values can be summarized as followed:
        Process lifecycle phase
        -----------------------
        process monitoring
        process analysis
        undetermined
        process identification, process analysis

        @param facet1_name: Name of the first multivalued column whose values are going to be synthesized in the bar chart.
        @param facet2_name: Name of the second multivalued column whose values are going to be synthesized in the bar chart.
        @param include: List of values of the first facet/attribute to be included in the resulting dataset.
        @param rotation: It represents the rotation of the labels in the X-axis. The default value is 90 (labels are written vertically)
        @param translation: Dictionary that specify the translation of the values that holds the column to be represented. The translation
        implies that the value of the column is replaced by its translated value in the bar chart. One example of this parameter is
        <code>
            dict_plc_translation={'process monitoring':'monitoring',\
                        'process identification': 'identification',\
                        'process analysis' : 'analysis'
                        }
        </code>
        Note that this translation is useful when the values of the column are too long to be represented in a chart. The translation
        let us replace the original value of the column (for example, process analysis in the previous dict_plc_translation dictionary) for a 
        shorter one (analysis).
        If translation holds an empty dictionary, the values of the column remain unchanged.
        @param exclude: List of values of the column that are going to be excluded from the bar chart. 
        The default value for this parameter is an empty list, which means that all de values of the column are represented 
        in the bar chart.
        '''    
        count_serie = self.data.count_faceted_multivalued_column_filtered(facet1_name, facet2_name, include)
        count_serie =  dataframes.exclude_index_values_from_series(count_serie, exclude)
            
        if len(translation) > 0:
            count_serie = dataframes.translate_index_dataframe (count_serie,translation)
        gu.create_bar(count_serie,x_labels_rotation=rotation)   

    def create_bar_count_single_column_with_multiple_values(self, column_name:str, rotation:int=90, \
                                                            translation:Dict[K,V]={}, exclude:List[K]=[], 
                                                            count_inferior_limit:int=None)->None:    
        
        '''
        It creates a bar chart with the values of the column in the x-axis and the frequency of the values in the y-axis.
        A single column with multiple values is a column that have rows that can hold multiple values in separated by a certain separator such as comma or semicolon.  
        One example of this kind of column is the following one. 
        
        Process lifecycle phase
        -----------------------
        process monitoring
        process analysis
        undetermined
        process identification, process analysis

        @param column_name: Name of the single column with multiple values whose values are going to be synthesized in the bar chart.
        @param rotation: It represents the rotation of the labels in the X-axis. The default value is 90 (labels are written vertically)
        @param translation: Dictionary that specify the translation of the values that holds the column to be represented. The translation
        implies that the value of the column is replaced by its translated value in the bar chart. One example of this parameter is
        <code>
            dict_plc_translation={'process monitoring':'monitoring',\
                        'process identification': 'identification',\
                        'process analysis' : 'analysis'
                        }
        </code>
        Note that this translation is useful when the values of the column are too long to be represented in a chart. The translation
        let us replace the original value of the column (for example, process analysis in the previous dict_plc_translation dictionary) for a 
        shorter one (analysis).
        If translation holds an empty dictionary, the values of the column remain unchanged.
        @param exclude: List of values of the column that are going to be excluded from the pie chart. For example, if we
        do not want to represent in the bar chart the undetermined value, we should invoke the function as follows:
        <code>
        create_piechart_count_multivalued_column("Process lifecycle phase", dict_plc_translation, ["undetermined"],1)
        </code> 
        The default value for this parameter is an empty list, which means that all de values of the column are represented 
        in the bar chart.
        @param count_inferior_limit: It sets the inferior limit for frequencies that are represented in the barchart. That is, only the
        values that have a frequence greater than count_inferior_limit are taken into account. The default value for this parameter is None, which means
        that there is no inferior limit.
        '''    
        count_serie = self.data.count_single_column_with_multiple_values(column_name)
        if count_inferior_limit != None:
            count_serie = count_serie [count_serie > count_inferior_limit]
        
        count_serie =  dataframes.exclude_index_values_from_series(count_serie, exclude)
            
        if len(translation) > 0:
            count_serie = dataframes.translate_index_dataframe (count_serie,translation)
        gu.create_bar(count_serie,x_labels_rotation=rotation)
        
    def create_bubble(self, facet1_name:str, facet2_name:str):
        df_count = self.data.count_faceted_multivalued_column(facet1_name, facet2_name)
        gu.create_bubble(df_count, 'number of studies', facet1_name, facet2_name)
    
    def create_bubble_filled_with_default(self, facet1_name:str, facet2_name:str, include:Set[str],default_facet2_value:str='n/a'):        
        df_count = self.data.count_faceted_multivalued_column_filled_with_default(facet1_name, facet2_name, include, default_facet2_value)
        gu.create_bubble(df_count, 'number of studies', facet1_name, facet2_name)
        
    def create_bubble_quality(self):
        '''
        It generates a bubble plot with intrinsiq IQ ( X-axis) and contextual IQ (Y-axis)
        data. 
        '''
  
        df_count = self.get_publications_quality.count_pairs_per_quality_measure
     
        intr_iq_colname =self.get_publications_quality.get_intrinsic_iq_colname
    
        cont_iq_colname = self.get_publications_quality.get_contextual_iq_colname
        #As there are pairs of values that are not present in the dataframe,
        #we need to set up labels
        labels =['LOW', 'MEDIUM', 'HIGH']
        gu.create_bubble(df_count, 'number of studies', intr_iq_colname, cont_iq_colname,\
                          rows=labels, columns=labels)    
            
    def create_completness_histogram(self):
        
        dataframe = self.get_publications_quality.count_completness_data()
        gu.create_bar(dataframe)
           
    def create_bubble_multivalued_single(self, multivalued_column:str, single_column:str, include:List[str],translation:Dict[K,V]={}):
        df_count = self.get_data.count_faceted_multivalued_single_column_filtered(multivalued_column, single_column,set(include))
            
        rows_labels = include
        if len(translation)>0:
            df_count= dataframes.translate_column(df_count, multivalued_column, translation)

        column_labels = self.get_data.get_single_column_values(single_column)
        single_column = self.get_data.get_config.get(single_column)
        gu.create_bubble2(df_count, 'number of studies', single_column, multivalued_column)
        
    def create_dict_from_multivalued_column(self, column_name: str)->Dict[str, Set[str]]:
        '''
        @param column_name: Name of the column used to generate the dictionary
        @return: A dictionary in which the keys are the different values of the multivalued column and the values
        are sets with the ids of the studies that have that value.
        '''
        return self.get_data.create_grouping_dict_from_multivalued_colum(column_name)
#     def create_line_plot_multivalued_single(self, multivalued_column:str, single_column:str, include:List[str]):
#       df_count = self.get_data.count_faceted_multivalued_single_column_filtered(multivalued_column, single_column,set(include))
#       col_names=['process redesign','process monitoring', 'process implementation', 'process identification', 'process discovery', 'process analysis']
#       colours =['orange','grey', 'red', 'green', 'blue', 'pink']
#       markers =[gu.MARKER_SQUARE,gu.MARKER_CIRCLE,gu.MARKER_SQUARE,gu.MARKER_CIRCLE, gu.MARKER_SQUARE,gu.MARKER_CIRCLE]
#       print(df_count)
#       single_column =self.get_data.get_config.get(single_column)
#       gu.create_line_plot_multiple_colums(df_count,single_column, col_names, colours ,markers)

    def create_dict_from_single_column(self, column_name: str)->Dict[str, Set[str]]:
        '''
        @param column_name: Name of the column used to generate the dictionary
        @return: A dictionary in which the keys are the different values of the multivalued column and the values
        are sets with the ids of the studies that have that value.
        '''
        return self.get_data.create_grouping_dict_from_single_colum(column_name)
    
    def create_tree_map_from_multivalued_columns(self, outer_name:str, inner_name:str, \
                                                 translations:List[Dict[K,V]]=[None, None]):
        facets = [outer_name, inner_name]
        count_serie = self.get_data.create_dataframe_facets_count_from_multivalued_column (facets, translation_dicts=translations)             
        count_name= "number of studies"
        gu.create_treemap_graph(count_serie, count_name, outer_name, inner_name)
        
        
    def create_sankey_from_multivalued_columns(self, source_column: str, target_column:str, exclude:List[Any]=None, replace_commas:bool=False):
        
        facets = [source_column, target_column]
        count_serie = self.get_data.create_dataframe_facets_count_from_multivalued_column (facets, exclude=exclude, replace_commas=replace_commas)             
        count_name= "number of studies"
        title = f"{source_column} vs {target_column}"
        gu.create_sankey(count_serie, source_column, target_column, "number of studies", title)
        